* Render graph
to generate automatic barriers (hopefully it will fix all synchronization errors)

* Command buffer management
Make a command buffer abstraction to avoid putting everything in =API=?
How does it handle (multiple command buffers, submission, dependency, multithreading)?

* Material system
 - points to a =Technique=

- =Effect= s are a collection of =Technique= s

each =Effect= is a shader =Program= and each =Technique= is a combination of state?

bind =Material (Technique)= to avoid just in time compilation of PSO before each draw

* Bugs

Validation errors when resizing but it works fine (Linux Intel HD mesa)
#+BEGIN_SRC
Validation Warning: [ UNASSIGNED-BestPractices-Error-Result ] Object 0: handle = 0x55db6cd556b0, type = VK_OBJECT_TYPE_INSTANCE; | MessageID = 0x5f379b89 | vkAcquireNextImageKHR(): Returned error VK_ERROR_OUT_OF_DATE_KHR.
Objects:
     [0]  NoName

Validation Error: [ VUID-VkSwapchainCreateInfoKHR-imageExtent-01274 ] Object 0: handle = 0x55db6d271450, type = VK_OBJECT_TYPE_DEVICE; | MessageID = 0x7cd0911d | vkCreateSwapchainKHR() called with imageExtent = (2373,1305), which is outside the bounds returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR(): currentExtent = (2345,1335), minImageExtent = (2345,1335), maxImageExtent = (2345,1335). The Vulkan spec states: imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://vulkan.lunarg.com/doc/view/1.2.148.0/linux/1.2-extensions/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageExtent-01274)
Objects:
     [0]  NoName
#+END_SRC
